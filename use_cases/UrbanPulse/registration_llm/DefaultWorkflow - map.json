{
  "dataflow": {
    "nodes": [
      {
        "id": "1919efd1-c2c5-440f-b2a5-444c99e83932",
        "type": "DATA_LOADING",
        "x": 103.82526874494368,
        "y": -325.2637222587782,
        "content": "import pandas as pd\r\nimport json\r\nimport numpy as np\r\n\r\njson_features_file = open(\"flickr-spring-features.json\")\r\n\r\nparsed_json_features = json.load(json_features_file)\r\n\r\ndf_features = pd.json_normalize(parsed_json_features[\"features\"])\r\n\r\ndf_features = df_features[[\"latLng\", \"rank\", \"resolutions.ALL.fnRank\", \"resolutions.ALL.sigRank\", \"resolutions.ALL.maxRank\"]]\r\ndf_features = df_features.rename(columns={\"resolutions.ALL.fnRank\": \"fnRank\", \"resolutions.ALL.sigRank\": \"sigRank\", \"resolutions.ALL.maxRank\": \"maxRank\"})\r\n\r\ndf_features = df_features.dropna(subset=[\"fnRank\"])\r\ndf_features = df_features.dropna(subset=[\"sigRank\"])\r\ndf_features = df_features.dropna(subset=[\"maxRank\"])\r\n\r\nreturn df_features",
        "out": "DEFAULT",
        "in": "DEFAULT",
        "goal": "Load and preprocess Flickr spring features data, extracting relevant columns and calculating combined ranks.",
        "metadata": {
          "keywords": [
            0,
            3,
            2,
            7,
            8,
            9,
            10,
            11,
            12
          ]
        }
      },
      {
        "id": "30460ee7-4c9a-4fa0-9800-4ef82502afac",
        "type": "DATA_LOADING",
        "x": 96.99999999999983,
        "y": 640.1486983549972,
        "content": "import pandas as pd\r\nimport json\r\nimport numpy as np\r\n\r\njson_features_file = open(\"flickr-summer-features.json\")\r\n\r\nparsed_json_features = json.load(json_features_file)\r\n\r\ndf_scatterplot = pd.json_normalize(parsed_json_features[\"features\"])\r\n\r\ndf_scatterplot = df_scatterplot[[\"rank\", \"resolutions.ALL.fnRank\", \"resolutions.ALL.sigRank\", \"resolutions.ALL.maxRank\"]]\r\ndf_scatterplot = df_scatterplot.rename(columns={\"resolutions.ALL.fnRank\": \"fnRank\", \"resolutions.ALL.sigRank\": \"sigRank\", \"resolutions.ALL.maxRank\": \"maxRank\"})\r\n\r\ndf_scatterplot = df_scatterplot.dropna(subset=[\"fnRank\"])\r\ndf_scatterplot = df_scatterplot.dropna(subset=[\"sigRank\"])\r\ndf_scatterplot = df_scatterplot.dropna(subset=[\"maxRank\"])\r\n\r\ndf_scatterplot[\"combinedRanks\"] = np.sqrt(\r\n    df_scatterplot[\"maxRank\"] ** 2 +\r\n    df_scatterplot[\"fnRank\"] ** 2 +\r\n    df_scatterplot[\"sigRank\"] ** 2\r\n)\r\n\r\nreturn df_scatterplot",
        "out": "DEFAULT",
        "in": "DEFAULT",
        "goal": "Load and preprocess Flickr summer features data, extracting rank and resolutions columns, dropping missing values, and calculating combinedRanks for visualization.",
        "metadata": {
          "keywords": [
            0,
            4,
            2,
            8,
            9,
            10,
            11
          ]
        }
      },
      {
        "id": "5d737aab-f8b6-4d8d-8993-502db124bbd2",
        "type": "VIS_VEGA",
        "x": 896.9999999999999,
        "y": 573.0000000000001,
        "content": "{ \r\n  \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.json\", \r\n  \"title\": \"RANK (summer)\",\r\n  \"params\": [ {\"name\": \"clickSelect\", \"select\": \"interval\"} ], \r\n  \"mark\": { \"type\": \"point\", \"cursor\": \"pointer\" }, \r\n  \"encoding\": { \r\n    \"x\": {\"field\": \"combinedRanks\", \"type\": \"quantitative\"},\r\n    \"y\": {\"field\": \"rank\", \"type\": \"quantitative\"}, \r\n    \"fillOpacity\": { \r\n        \"condition\": {\"param\": \"clickSelect\", \"value\": 1}, \r\n        \"value\": 0.3 \r\n    }, \r\n    \"color\": { \r\n      \"field\": \"interacted\", \r\n      \"type\": \"nominal\", \r\n      \"condition\": {\r\n        \"test\": \"datum.interacted === '1'\", \"value\": \"red\", \"else\": \"blue\"} } \r\n  }, \r\n  \"config\": { \"scale\": { \"bandPaddingInner\": 0.2 } } \r\n} ",
        "out": "DEFAULT",
        "in": "DEFAULT",
        "goal": "",
        "metadata": {
          "keywords": [
            14
          ]
        }
      },
      {
        "id": "ba06142d-bc60-4e73-969a-14c00c3879e5",
        "type": "DATA_LOADING",
        "x": 99.99999999999983,
        "y": 1152.0000000000002,
        "content": "import pandas as pd\r\nimport json\r\nimport numpy as np\r\n\r\njson_features_file = open(\"flickr-fall-features.json\")\r\n\r\nparsed_json_features = json.load(json_features_file)\r\n\r\ndf_scatterplot = pd.json_normalize(parsed_json_features[\"features\"])\r\n\r\ndf_scatterplot = df_scatterplot[[\"rank\", \"resolutions.ALL.fnRank\", \"resolutions.ALL.sigRank\", \"resolutions.ALL.maxRank\"]]\r\ndf_scatterplot = df_scatterplot.rename(columns={\"resolutions.ALL.fnRank\": \"fnRank\", \"resolutions.ALL.sigRank\": \"sigRank\", \"resolutions.ALL.maxRank\": \"maxRank\"})\r\n\r\ndf_scatterplot = df_scatterplot.dropna(subset=[\"fnRank\"])\r\ndf_scatterplot = df_scatterplot.dropna(subset=[\"sigRank\"])\r\ndf_scatterplot = df_scatterplot.dropna(subset=[\"maxRank\"])\r\n\r\ndf_scatterplot[\"combinedRanks\"] = np.sqrt(\r\n    df_scatterplot[\"maxRank\"] ** 2 +\r\n    df_scatterplot[\"fnRank\"] ** 2 +\r\n    df_scatterplot[\"sigRank\"] ** 2\r\n)\r\n\r\nreturn df_scatterplot",
        "out": "DEFAULT",
        "in": "DEFAULT",
        "goal": "Load and process data from flickr-fall-features.json by extracting relevant columns, removing missing values, and calculating combinedRanks for visualization in a scatterplot.",
        "metadata": {
          "keywords": [
            0,
            5,
            2,
            8,
            9,
            10,
            11
          ]
        }
      },
      {
        "id": "2ee78370-1b6e-4fcb-af1f-f61260e9e3c1",
        "type": "VIS_VEGA",
        "x": 889.9999999999999,
        "y": 1069.0000000000002,
        "content": "{ \r\n  \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.json\", \r\n  \"title\": \"RANK (fall)\",\r\n  \"params\": [ {\"name\": \"clickSelect\", \"select\": \"interval\"} ], \r\n  \"mark\": { \"type\": \"point\", \"cursor\": \"pointer\" }, \r\n  \"encoding\": { \r\n    \"x\": {\"field\": \"combinedRanks\", \"type\": \"quantitative\"},\r\n    \"y\": {\"field\": \"rank\", \"type\": \"quantitative\"}, \r\n    \"fillOpacity\": { \r\n        \"condition\": {\"param\": \"clickSelect\", \"value\": 1}, \r\n        \"value\": 0.3 \r\n    }, \r\n    \"color\": { \r\n      \"field\": \"interacted\", \r\n      \"type\": \"nominal\", \r\n      \"condition\": {\r\n        \"test\": \"datum.interacted === '1'\", \"value\": \"red\", \"else\": \"blue\"} } \r\n  }, \r\n  \"config\": { \"scale\": { \"bandPaddingInner\": 0.2 } } \r\n} ",
        "out": "DEFAULT",
        "in": "DEFAULT",
        "goal": "",
        "metadata": {
          "keywords": [
            14
          ]
        }
      },
      {
        "id": "a97981a5-b6d6-4c6f-9b54-b302f47caf3c",
        "type": "DATA_LOADING",
        "x": 80.99999999999977,
        "y": 1752.0000000000002,
        "content": "import pandas as pd\r\nimport json\r\nimport numpy as np\r\n\r\njson_features_file = open(\"flickr-winter-features.json\")\r\n\r\nparsed_json_features = json.load(json_features_file)\r\n\r\ndf_scatterplot = pd.json_normalize(parsed_json_features[\"features\"])\r\n\r\ndf_scatterplot = df_scatterplot[[\"rank\", \"resolutions.ALL.fnRank\", \"resolutions.ALL.sigRank\", \"resolutions.ALL.maxRank\"]]\r\ndf_scatterplot = df_scatterplot.rename(columns={\"resolutions.ALL.fnRank\": \"fnRank\", \"resolutions.ALL.sigRank\": \"sigRank\", \"resolutions.ALL.maxRank\": \"maxRank\"})\r\n\r\ndf_scatterplot = df_scatterplot.dropna(subset=[\"fnRank\"])\r\ndf_scatterplot = df_scatterplot.dropna(subset=[\"sigRank\"])\r\ndf_scatterplot = df_scatterplot.dropna(subset=[\"maxRank\"])\r\n\r\ndf_scatterplot[\"combinedRanks\"] = np.sqrt(\r\n    df_scatterplot[\"maxRank\"] ** 2 +\r\n    df_scatterplot[\"fnRank\"] ** 2 +\r\n    df_scatterplot[\"sigRank\"] ** 2\r\n)\r\n\r\nreturn df_scatterplot",
        "out": "DEFAULT",
        "in": "DEFAULT",
        "goal": "Load and preprocess data from flickr-winter-features.json by extracting relevant columns and calculating a new column named combinedRanks. Drop rows with missing values in crucial columns.",
        "metadata": {
          "keywords": [
            0,
            6,
            2,
            8,
            9,
            10,
            11
          ]
        }
      },
      {
        "id": "18b028b8-8c0f-4f91-b21b-672fa0608caf",
        "type": "VIS_VEGA",
        "x": 888.9999999999999,
        "y": 1673.0000000000002,
        "content": "{ \r\n  \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.json\", \r\n  \"title\": \"RANK (winter)\",\r\n  \"params\": [ {\"name\": \"clickSelect\", \"select\": \"interval\"} ], \r\n  \"mark\": { \"type\": \"point\", \"cursor\": \"pointer\" }, \r\n  \"encoding\": { \r\n    \"x\": {\"field\": \"combinedRanks\", \"type\": \"quantitative\"},\r\n    \"y\": {\"field\": \"rank\", \"type\": \"quantitative\"}, \r\n    \"fillOpacity\": { \r\n        \"condition\": {\"param\": \"clickSelect\", \"value\": 1}, \r\n        \"value\": 0.3 \r\n    }, \r\n    \"color\": { \r\n      \"field\": \"interacted\", \r\n      \"type\": \"nominal\", \r\n      \"condition\": {\r\n        \"test\": \"datum.interacted === '1'\", \"value\": \"red\", \"else\": \"blue\"} } \r\n  }, \r\n  \"config\": { \"scale\": { \"bandPaddingInner\": 0.2 } } \r\n} ",
        "out": "DEFAULT",
        "in": "DEFAULT",
        "goal": "",
        "metadata": {
          "keywords": [
            12,
            13,
            14
          ]
        }
      },
      {
        "id": "3eac0e92-9987-495a-99e3-32dd82c93dbc",
        "type": "COMPUTATION_ANALYSIS",
        "x": 949.3720017347739,
        "y": -327.2319244800332,
        "content": "import numpy as np\r\n\r\ndf_scatterplot = arg[[\"rank\", \"fnRank\", \"sigRank\", \"maxRank\"]]\r\n\r\ndf_scatterplot[\"combinedRanks\"] = np.sqrt(\r\n    df_scatterplot[\"maxRank\"] ** 2 +\r\n    df_scatterplot[\"fnRank\"] ** 2 +\r\n    df_scatterplot[\"sigRank\"] ** 2\r\n)\r\n\r\nreturn df_scatterplot",
        "out": "DEFAULT",
        "in": "DEFAULT",
        "goal": "",
        "metadata": {
          "keywords": [
            11
          ]
        }
      },
      {
        "id": "76176e87-bc95-468c-ab38-3295963149bc",
        "type": "VIS_VEGA",
        "x": 3210.5253273150447,
        "y": -238.62284728645315,
        "content": "{ \r\n  \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.json\", \r\n  \"title\": \"RANK (spring)\",\r\n  \"params\": [ {\"name\": \"clickSelect\", \"select\": \"interval\"} ], \r\n  \"mark\": { \"type\": \"point\", \"cursor\": \"pointer\" }, \r\n  \"encoding\": { \r\n    \"x\": {\"field\": \"combinedRanks\", \"type\": \"quantitative\"},\r\n    \"y\": {\"field\": \"rank\", \"type\": \"quantitative\"}, \r\n    \"fillOpacity\": { \r\n        \"condition\": {\"param\": \"clickSelect\", \"value\": 1}, \r\n        \"value\": 0.3 \r\n    }, \r\n    \"color\": { \r\n      \"field\": \"interacted\", \r\n      \"type\": \"nominal\", \r\n      \"condition\": {\r\n        \"test\": \"datum.interacted === '1'\", \"value\": \"red\", \"else\": \"blue\"} } \r\n  }, \r\n  \"config\": { \"scale\": { \"bandPaddingInner\": 0.2 } } \r\n} ",
        "out": "DEFAULT",
        "in": "DEFAULT",
        "goal": "",
        "metadata": {
          "keywords": [
            14
          ]
        }
      },
      {
        "id": "39a34b20-d2e7-4d4f-ad98-68cc04d28a16",
        "type": "DATA_TRANSFORMATION",
        "x": 958.3610320629937,
        "y": -889.098719152068,
        "content": "import pandas as pd\r\nimport geopandas as gpd\r\nfrom shapely.geometry import Point\r\n\r\ndf_points = arg\r\n\r\ndf_points = df_points.explode(\"latLng\", ignore_index=True)\r\n\r\ndf_points[\"geometry\"] = df_points[\"latLng\"].apply(lambda x: Point(x[1], x[0]))  # (lon, lat)\r\n\r\ngdf_points = gpd.GeoDataFrame(df_points, geometry=\"geometry\", crs=\"EPSG:4326\")\r\n\r\ngdf_points = gdf_points.drop(columns=[\"latLng\"])\r\n\r\ngdf_points[\"value\"] = 1\r\n\r\ngdf_points = gdf_points.to_crs(3857)\r\n\r\ngdf_points[\"geometry\"] = gdf_points[\"geometry\"].buffer(25)\r\n\r\ngdf_points = gdf_points[[\"geometry\", \"value\"]]\r\n\r\ngdf_points = gdf_points.to_crs(3395)\r\n\r\ngdf_points.metadata = {\r\n    'name': 'pulse'\r\n}\r\n\r\nreturn gdf_points",
        "out": "DEFAULT",
        "in": "DEFAULT",
        "goal": "Transform point data by exploding latitude and longitude coordinates into a GeoDataFrame, assigning geometry, and converting the coordinate reference system to EPSG:3395 for further analysis.",
        "metadata": {
          "keywords": [
            11
          ]
        }
      },
      {
        "id": "14819cc6-a649-4703-b013-09307d3290f2",
        "type": "DATA_LOADING",
        "x": 960.5293501273444,
        "y": -1543.7252219305742,
        "content": "import utk\r\n\r\nuc = utk.OSM.load([40.721080386107815, -73.99495342796531, 40.76282380707685, -73.95809371928384], layers=['parks', 'roads'])\r\n\r\n#parks\r\njson_parks = uc.layers['json'][0]\r\ngdf_parks = uc.layers['gdf']['objects'][0]\r\ngdf_parks.metadata = {\r\n 'name': 'parks'\r\n}\r\n\r\njson_roads = uc.layers['json'][1]\r\ngdf_roads = uc.layers['gdf']['objects'][1]\r\ngdf_roads.metadata = {\r\n 'name': 'roads'\r\n}\r\n\r\nreturn gdf_parks, gdf_roads",
        "out": "DEFAULT",
        "in": "DEFAULT",
        "goal": "Load park data from OSM using coordinates, preparing a GeoDataFrame for visualization and analysis within the urban context.",
        "metadata": {
          "keywords": [
            14
          ]
        }
      },
      {
        "id": "c389d0ad-9229-48e3-bb0e-e14061bccf9b",
        "type": "MERGE_FLOW",
        "x": 1857.077739631498,
        "y": -1093.3363797170987,
        "out": "DEFAULT",
        "in": "DEFAULT",
        "goal": "Merge data from spring, summer, fall, and winter JSON files for preprocessing and visualization, including rank calculations and transforming coordinates into a GeoDataFrame for further geospatial analysis.",
        "metadata": {
          "keywords": [
            12
          ]
        }
      },
      {
        "id": "2937b9d1-fc4b-4e69-bff8-4a1bc6257a13",
        "type": "COMPUTATION_ANALYSIS",
        "x": 2197.032381420571,
        "y": -1208.8998787875494,
        "content": "return arg[0], arg[1][0], arg[1][1]",
        "out": "DEFAULT",
        "in": "DEFAULT",
        "goal": "Combine and output the processed data from the flickr seasonal datasets, including extracted and cleaned ranks, alongside relevant dimensions for further analysis and visualization.",
        "metadata": {
          "keywords": [
            12
          ]
        }
      },
      {
        "id": "eb1f1073-f395-4a75-9024-f96651425627",
        "type": "VIS_UTK",
        "x": 3101.9766373506714,
        "y": -1208.6765703899464,
        "content": "{\n    \"components\": [\n        {\n            \"id\": \"grammar_map\",\n            \"position\": {\n                \"width\": [\n                    1,\n                    12\n                ],\n                \"height\": [\n                    1,\n                    4\n                ]\n            }\n        }\n    ],\n    \"knots\": [],\n    \"ex_knots\": [\n        {\n            \"id\": \"pulse0\",\n            \"out_name\": \"pulse\",\n            \"in_name\": \"value\"\n        },\n        {\n            \"id\": \"parks0\",\n            \"out_name\": \"parks\"\n        },\n        {\n            \"id\": \"roads0\",\n            \"out_name\": \"roads\"\n        }\n    ],\n    \"grid\": {\n        \"width\": 12,\n        \"height\": 4\n    },\n    \"grammar\": false\n}",
        "out": "DEFAULT",
        "in": "DEFAULT",
        "goal": "Visualize processed seasonal data using the Urban Toolkit, showcasing interactive scatterplots for ranks and combinedRanks derived from the flickr datasets.",
        "metadata": {
          "keywords": []
        }
      }
    ],
    "edges": [
      {
        "id": "reactflow__edge-30460ee7-4c9a-4fa0-9800-4ef82502afacout-5d737aab-f8b6-4d8d-8993-502db124bbd2in",
        "source": "30460ee7-4c9a-4fa0-9800-4ef82502afac",
        "target": "5d737aab-f8b6-4d8d-8993-502db124bbd2",
        "metadata": {
          "keywords": []
        }
      },
      {
        "id": "reactflow__edge-ba06142d-bc60-4e73-969a-14c00c3879e5out-2ee78370-1b6e-4fcb-af1f-f61260e9e3c1in",
        "source": "ba06142d-bc60-4e73-969a-14c00c3879e5",
        "target": "2ee78370-1b6e-4fcb-af1f-f61260e9e3c1",
        "metadata": {
          "keywords": []
        }
      },
      {
        "id": "reactflow__edge-a97981a5-b6d6-4c6f-9b54-b302f47caf3cout-18b028b8-8c0f-4f91-b21b-672fa0608cafin",
        "source": "a97981a5-b6d6-4c6f-9b54-b302f47caf3c",
        "target": "18b028b8-8c0f-4f91-b21b-672fa0608caf",
        "metadata": {
          "keywords": []
        }
      },
      {
        "id": "reactflow__edge-1919efd1-c2c5-440f-b2a5-444c99e83932out-3eac0e92-9987-495a-99e3-32dd82c93dbcin",
        "source": "1919efd1-c2c5-440f-b2a5-444c99e83932",
        "target": "3eac0e92-9987-495a-99e3-32dd82c93dbc",
        "metadata": {
          "keywords": []
        }
      },
      {
        "id": "reactflow__edge-3eac0e92-9987-495a-99e3-32dd82c93dbcout-76176e87-bc95-468c-ab38-3295963149bcin",
        "source": "3eac0e92-9987-495a-99e3-32dd82c93dbc",
        "target": "76176e87-bc95-468c-ab38-3295963149bc",
        "metadata": {
          "keywords": []
        }
      },
      {
        "id": "reactflow__edge-1919efd1-c2c5-440f-b2a5-444c99e83932out-39a34b20-d2e7-4d4f-ad98-68cc04d28a16in",
        "source": "1919efd1-c2c5-440f-b2a5-444c99e83932",
        "target": "39a34b20-d2e7-4d4f-ad98-68cc04d28a16",
        "metadata": {
          "keywords": []
        }
      },
      {
        "id": "reactflow__edge-39a34b20-d2e7-4d4f-ad98-68cc04d28a16out-c389d0ad-9229-48e3-bb0e-e14061bccf9bin",
        "source": "39a34b20-d2e7-4d4f-ad98-68cc04d28a16",
        "target": "c389d0ad-9229-48e3-bb0e-e14061bccf9b",
        "metadata": {
          "keywords": []
        }
      },
      {
        "id": "reactflow__edge-14819cc6-a649-4703-b013-09307d3290f2out-c389d0ad-9229-48e3-bb0e-e14061bccf9bin",
        "source": "14819cc6-a649-4703-b013-09307d3290f2",
        "target": "c389d0ad-9229-48e3-bb0e-e14061bccf9b",
        "metadata": {
          "keywords": []
        }
      },
      {
        "id": "reactflow__edge-c389d0ad-9229-48e3-bb0e-e14061bccf9bout-2937b9d1-fc4b-4e69-bff8-4a1bc6257a13in",
        "source": "c389d0ad-9229-48e3-bb0e-e14061bccf9b",
        "target": "2937b9d1-fc4b-4e69-bff8-4a1bc6257a13",
        "metadata": {
          "keywords": []
        }
      },
      {
        "id": "reactflow__edge-2937b9d1-fc4b-4e69-bff8-4a1bc6257a13out-eb1f1073-f395-4a75-9024-f96651425627in",
        "source": "2937b9d1-fc4b-4e69-bff8-4a1bc6257a13",
        "target": "eb1f1073-f395-4a75-9024-f96651425627",
        "metadata": {
          "keywords": []
        }
      }
    ],
    "name": "DefaultWorkflow",
    "task": "Load and preprocess data from flickr-spring-features.json by extracting relevant columns for rank, fnRank, sigRank, and maxRank, and drop rows with missing values. For flickr-summer-features.json, similarly extract the columns, remove rows with missing values, and calculate the combinedRanks as the square root of the sum of the squares of maxRank, fnRank, and sigRank. For flickr-fall-features.json, repeat the extraction and cleaning steps and create the combinedRanks column. Load data from flickr-winter-features.json using the same extraction and cleaning criteria, ensuring the combinedRanks column is created. Transform the latitude and longitude coordinates from the spring dataset into a GeoDataFrame, assigning geometry and converting the coordinate reference system to EPSG:3395. Merge all processed datasets from the four seasons and visualize the results using the Urban Toolkit, showcasing interactive scatterplots for ranks and combinedRanks from the datasets combined across all seasons.",
    "timestamp": 1743026235356,
    "provenance_id": "DefaultWorkflow"
  }
}