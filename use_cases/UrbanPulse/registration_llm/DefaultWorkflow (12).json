{
  "dataflow": {
    "nodes": [
      {
        "id": "66a7b2b2-9bcc-4f49-a84f-cd4a8db60155",
        "type": "DATA_LOADING",
        "x": -9.007234423575937,
        "y": -184.28753362077583,
        "content": "import pandas as pd\r\nimport json\r\n\r\njson_features_file = open(\"flickr-features.json\")\r\n\r\nparsed_json_features = json.load(json_features_file)\r\n\r\ndf_features = pd.json_normalize(parsed_json_features[\"features\"])\r\n\r\ndf_features = df_features[[\"latLng\", \"rank\", \"resolutions.HOUR.fnRank\", \"resolutions.HOUR.sigRank\", \"resolutions.HOUR.maxRank\", \"resolutions.DAYOFWEEK.fnRank\", \"resolutions.DAYOFWEEK.sigRank\", \"resolutions.DAYOFWEEK.maxRank\", \"resolutions.MONTH.fnRank\", \"resolutions.MONTH.sigRank\", \"resolutions.MONTH.maxRank\"]]\r\n\r\ndf_hour = df_features[[\"latLng\", \"rank\", \r\n    \"resolutions.HOUR.fnRank\", \"resolutions.HOUR.sigRank\", \"resolutions.HOUR.maxRank\"]].copy()\r\n\r\ndf_dayofweek = df_features[[\"latLng\", \"rank\", \r\n    \"resolutions.DAYOFWEEK.fnRank\", \"resolutions.DAYOFWEEK.sigRank\", \"resolutions.DAYOFWEEK.maxRank\"]].copy()\r\n\r\ndf_month = df_features[[\"latLng\", \"rank\", \r\n    \"resolutions.MONTH.fnRank\", \"resolutions.MONTH.sigRank\", \"resolutions.MONTH.maxRank\"]].copy()\r\n\r\nreturn df_hour, df_dayofweek, df_month",
        "out": "DEFAULT",
        "in": "DEFAULT",
        "goal": "Load and preprocess features data from a JSON file, extracting specific ranking information for hour, day of the week, and month into separate DataFrames.",
        "metadata": {
          "keywords": [
            0,
            1,
            2,
            3,
            6
          ]
        }
      },
      {
        "id": "e413cafe-7f5f-4c29-a3df-6effae8fcfce",
        "type": "COMPUTATION_ANALYSIS",
        "x": 968.7770170016413,
        "y": -545.0027364567123,
        "content": "\r\nimport pandas as pd\r\n\r\ndf_hour = arg[0]\r\n\r\ndf_hour = df_hour.rename(columns={\"resolutions.HOUR.fnRank\": \"fnRank\", \"resolutions.HOUR.sigRank\": \"sigRank\", \"resolutions.HOUR.maxRank\": \"maxRank\"})\r\n\r\ndf_hour = df_hour.dropna(subset=[\"fnRank\"])\r\ndf_hour = df_hour.dropna(subset=[\"sigRank\"])\r\ndf_hour = df_hour.dropna(subset=[\"maxRank\"])\r\n\r\nreturn df_hour\r\n\r\n",
        "out": "DATAFRAME",
        "in": "DATAFRAME",
        "goal": "Normalize hourly rank features by renaming columns and removing rows with NaN values in the DataFrame.",
        "metadata": {
          "keywords": [
            7,
            8,
            11
          ]
        }
      },
      {
        "id": "98c19c59-1c5b-4d3b-b2d5-5b2b1e303474",
        "type": "COMPUTATION_ANALYSIS",
        "x": 963.244731527461,
        "y": -185.25829495854518,
        "content": "df_dayofweek = arg[1]\r\n\r\ndf_dayofweek = df_dayofweek.rename(columns={\"resolutions.DAYOFWEEK.fnRank\": \"fnRank\", \"resolutions.DAYOFWEEK.sigRank\": \"sigRank\", \"resolutions.DAYOFWEEK.maxRank\": \"maxRank\"})\r\n\r\ndf_dayofweek = df_dayofweek.dropna(subset=[\"fnRank\"])\r\ndf_dayofweek = df_dayofweek.dropna(subset=[\"sigRank\"])\r\ndf_dayofweek = df_dayofweek.dropna(subset=[\"maxRank\"])\r\n\r\nreturn df_dayofweek",
        "out": "DEFAULT",
        "in": "DEFAULT",
        "goal": "Normalize daily rank features by renaming columns and removing rows with missing values for fnRank, sigRank, and maxRank.",
        "metadata": {
          "keywords": [
            7,
            8,
            11,
            12
          ]
        }
      },
      {
        "id": "ddc2c490-69f6-485d-8915-47c366a914c8",
        "type": "COMPUTATION_ANALYSIS",
        "x": 968.3637320709595,
        "y": 177.74967659442245,
        "content": "df_month = arg[2]\r\n\r\ndf_month = df_month.rename(columns={\"resolutions.MONTH.fnRank\": \"fnRank\", \"resolutions.MONTH.sigRank\": \"sigRank\", \"resolutions.MONTH.maxRank\": \"maxRank\"})\r\n\r\ndf_month = df_month.dropna(subset=[\"fnRank\"])\r\ndf_month = df_month.dropna(subset=[\"sigRank\"])\r\ndf_month = df_month.dropna(subset=[\"maxRank\"])\r\n\r\nreturn df_month",
        "out": "DEFAULT",
        "in": "DEFAULT",
        "goal": "Prepare the monthly ranks DataFrame by renaming specific columns and dropping rows with missing values for fnRank, sigRank, and maxRank.",
        "metadata": {
          "keywords": [
            7,
            8,
            11,
            12
          ]
        }
      },
      {
        "id": "8b23bec9-93cf-43f8-87ab-33b56250a9f1",
        "type": "COMPUTATION_ANALYSIS",
        "x": 1692.1888208109112,
        "y": -545.3329992062935,
        "content": "import numpy as np\r\n\r\ndf_scatterplot = arg[[\"rank\", \"fnRank\", \"sigRank\", \"maxRank\"]]\r\n\r\ndf_scatterplot[\"combinedRanks\"] = np.sqrt(\r\n    df_scatterplot[\"maxRank\"] ** 2 +\r\n    df_scatterplot[\"fnRank\"] ** 2 +\r\n    df_scatterplot[\"sigRank\"] ** 2\r\n)\r\n\r\ndf_scatterplot['linked'] = df_scatterplot.index.to_series().apply(lambda x: [x])\r\n\r\nreturn df_scatterplot",
        "out": "DEFAULT",
        "in": "DEFAULT",
        "goal": "Calculate combined ranks from multiple ranking columns and prepare data for visualization, ensuring each row is linked to its index.",
        "metadata": {
          "keywords": [
            9,
            10
          ]
        }
      },
      {
        "id": "648b53be-0db2-4d76-8fa3-1e7243cad265",
        "type": "COMPUTATION_ANALYSIS",
        "x": 1686.8864638054408,
        "y": -186.0442553115452,
        "content": "import numpy as np\r\n\r\ndf_scatterplot = arg[[\"rank\", \"fnRank\", \"sigRank\", \"maxRank\"]]\r\n\r\ndf_scatterplot[\"combinedRanks\"] = np.sqrt(\r\n    df_scatterplot[\"maxRank\"] ** 2 +\r\n    df_scatterplot[\"fnRank\"] ** 2 +\r\n    df_scatterplot[\"sigRank\"] ** 2\r\n)\r\n\r\ndf_scatterplot['linked'] = df_scatterplot.index.to_series().apply(lambda x: [x])\r\n\r\nreturn df_scatterplot",
        "out": "DEFAULT",
        "in": "DEFAULT",
        "goal": "Calculate combined ranking metrics for features data, normalize by creating a new column with the computed values, and prepare indexed links for further analysis.",
        "metadata": {
          "keywords": [
            9,
            10
          ]
        }
      },
      {
        "id": "60c56c59-6733-49e1-a867-717bf1a79eb1",
        "type": "COMPUTATION_ANALYSIS",
        "x": 1686.765073012873,
        "y": 177.74967659442245,
        "content": "import numpy as np\r\n\r\ndf_scatterplot = arg[[\"rank\", \"fnRank\", \"sigRank\", \"maxRank\"]]\r\n\r\ndf_scatterplot[\"combinedRanks\"] = np.sqrt(\r\n    df_scatterplot[\"maxRank\"] ** 2 +\r\n    df_scatterplot[\"fnRank\"] ** 2 +\r\n    df_scatterplot[\"sigRank\"] ** 2\r\n)\r\n\r\ndf_scatterplot['linked'] = df_scatterplot.index.to_series().apply(lambda x: [x])\r\n\r\nreturn df_scatterplot",
        "out": "DEFAULT",
        "in": "DEFAULT",
        "goal": "Calculate the combined rank for each entry in the DataFrame based on hourly, daily, and monthly ranking metrics while preparing a list of index links for further processing.",
        "metadata": {
          "keywords": [
            9,
            10
          ]
        }
      },
      {
        "id": "586c9397-58ad-4768-9ad6-a4c534183209",
        "type": "DATA_POOL",
        "x": 2524.3523747508284,
        "y": -192.1311937146227,
        "out": "DEFAULT",
        "in": "DEFAULT",
        "goal": "",
        "metadata": {
          "keywords": []
        }
      },
      {
        "id": "ce3662eb-851c-4796-94e8-1f4ca844b86b",
        "type": "DATA_POOL",
        "x": 2527.155716382886,
        "y": 174.30358152943134,
        "out": "DEFAULT",
        "in": "DEFAULT",
        "goal": "",
        "metadata": {
          "keywords": []
        }
      },
      {
        "id": "e9020e3f-607a-4e00-badf-057cdaca5e47",
        "type": "DATA_POOL",
        "x": 2526.512962949953,
        "y": -545.9302870537093,
        "out": "DEFAULT",
        "in": "DEFAULT",
        "goal": "",
        "metadata": {
          "keywords": []
        }
      }
    ],
    "edges": [
      {
        "id": "reactflow__66a7b2b2-9bcc-4f49-a84f-cd4a8db60155_e413cafe-7f5f-4c29-a3df-6effae8fcfce_1",
        "source": "66a7b2b2-9bcc-4f49-a84f-cd4a8db60155",
        "target": "e413cafe-7f5f-4c29-a3df-6effae8fcfce",
        "metadata": {
          "keywords": [
            0
          ]
        }
      },
      {
        "id": "reactflow__edge-66a7b2b2-9bcc-4f49-a84f-cd4a8db60155out-98c19c59-1c5b-4d3b-b2d5-5b2b1e303474in",
        "source": "66a7b2b2-9bcc-4f49-a84f-cd4a8db60155",
        "target": "98c19c59-1c5b-4d3b-b2d5-5b2b1e303474",
        "metadata": {
          "keywords": [
            0
          ]
        }
      },
      {
        "id": "reactflow__edge-66a7b2b2-9bcc-4f49-a84f-cd4a8db60155out-ddc2c490-69f6-485d-8915-47c366a914c8in",
        "source": "66a7b2b2-9bcc-4f49-a84f-cd4a8db60155",
        "target": "ddc2c490-69f6-485d-8915-47c366a914c8",
        "metadata": {
          "keywords": [
            0
          ]
        }
      },
      {
        "id": "reactflow__edge-e413cafe-7f5f-4c29-a3df-6effae8fcfceout-8b23bec9-93cf-43f8-87ab-33b56250a9f1in",
        "source": "e413cafe-7f5f-4c29-a3df-6effae8fcfce",
        "target": "8b23bec9-93cf-43f8-87ab-33b56250a9f1",
        "metadata": {
          "keywords": [
            7
          ]
        }
      },
      {
        "id": "reactflow__edge-98c19c59-1c5b-4d3b-b2d5-5b2b1e303474out-648b53be-0db2-4d76-8fa3-1e7243cad265in",
        "source": "98c19c59-1c5b-4d3b-b2d5-5b2b1e303474",
        "target": "648b53be-0db2-4d76-8fa3-1e7243cad265",
        "metadata": {
          "keywords": [
            7
          ]
        }
      },
      {
        "id": "reactflow__edge-ddc2c490-69f6-485d-8915-47c366a914c8out-60c56c59-6733-49e1-a867-717bf1a79eb1in",
        "source": "ddc2c490-69f6-485d-8915-47c366a914c8",
        "target": "60c56c59-6733-49e1-a867-717bf1a79eb1",
        "metadata": {
          "keywords": [
            7
          ]
        }
      },
      {
        "id": "reactflow__edge-8b23bec9-93cf-43f8-87ab-33b56250a9f1out-e9020e3f-607a-4e00-badf-057cdaca5e47in",
        "source": "8b23bec9-93cf-43f8-87ab-33b56250a9f1",
        "target": "e9020e3f-607a-4e00-badf-057cdaca5e47"
      },
      {
        "id": "reactflow__edge-648b53be-0db2-4d76-8fa3-1e7243cad265out-586c9397-58ad-4768-9ad6-a4c534183209in",
        "source": "648b53be-0db2-4d76-8fa3-1e7243cad265",
        "target": "586c9397-58ad-4768-9ad6-a4c534183209"
      },
      {
        "id": "reactflow__edge-60c56c59-6733-49e1-a867-717bf1a79eb1out-ce3662eb-851c-4796-94e8-1f4ca844b86bin",
        "source": "60c56c59-6733-49e1-a867-717bf1a79eb1",
        "target": "ce3662eb-851c-4796-94e8-1f4ca844b86b"
      }
    ],
    "name": "DefaultWorkflow",
    "task": "Load the features data from a JSON file, extracting specific ranking information for hourly, daily, and monthly resolutions into separate DataFrames. Normalize the hourly ranks DataFrame by renaming columns to improve readability and removing rows with NaN values in the fnRank, sigRank, and maxRank columns. Normalize the daily ranks DataFrame by renaming relevant columns and ensuring there are no missing values in fnRank, sigRank, and maxRank. Prepare the monthly ranks DataFrame by renaming specific columns for enhanced clarity and dropping any rows that incorporate NaN values. Additionally, calculate the combined ranks for each entry based on the multiple ranking columns, creating a new column with the computed values and preparing a list of linked indices for further analysis.",
    "timestamp": 1743112382627,
    "provenance_id": "DefaultWorkflow"
  }
}